import re, struct
from dataclasses import dataclass, fields, field

def unpack(type, data: str | bytes):
    if isinstance(data, str):
        data = bytes.fromhex(data)
    formats = type.FORMAT.split("-")
    assert len(formats) == len(fields(type))

    obj = type()
    pos = 0
    for i, field in enumerate(fields(type)):
        m = re.match(r"[iu](\d+)$", formats[i])
        if not m:
            cls = globals()[formats[i]]
            val = unpack(cls, data)
            size = val.size()
        else:
            size = int(m.group(1)) // 8
            val = int.from_bytes(data[pos:size], "big", signed=False)
        setattr(obj, field.name, val)
        data = data[size:]
    return obj


def unpack_array(type, data: str | bytes):
    if isinstance(data, str):
        data = bytes.fromhex(data)
    size = struct.unpack(">I", data[:4])[0]
    items = []
    data = data[4:]
    while len(data) != 0:
        obj = unpack(type, data)
        items.append(obj)
        data = data[obj.size():]
    assert size == len(items)
    return items


def pack(obj):
    formats = obj.FORMAT.split("-")
    data = b""
    for i, field in enumerate(fields(obj.__class__)):
        val = getattr(obj, field.name)
        if m := re.match(r"[iu](\d+)$", formats[i]):
            size = int(m.group(1)) // 8
            data += val.to_bytes(size, byteorder="big", signed=False)
        else:
            data += pack(val)
    return data


@dataclass
class Message:
    addr_from: int | None = None
    addr_to: int | None = None
    amount: int | None = None
    FORMAT = "u256-u256-u256"
    def size(self):
        return 32 * 3

% ir.types.select{ _2.is_a?(StructType) && !_2.descr['flags']&.include?("storage") }.each do |name, type|

@dataclass
class <%= name %>:
%   if type.descr['flags']&.include?("message")
%     msg = "Message-"
    message_header: Message | None = None
%   end
%   type.fields.each do |field|
    <%= field.name %>: <%= field.type.python_name() %> | None = None
%   end
    FORMAT = "<%= msg %><%= type.fields.map(&:type).map(&:name).join('-') %>"

    def size(self):
        sz = <%= type.fields.select{ !_1.type.is_a?(ContainerType) }.map(&:type).sum(&:bytes_size) %>
%   type.fields.select{ _1.type.is_a?(ContainerType) }.each do |field|
        sz += sum(x.size() for x in self.<%= field.name %>)
%   end
        return sz

    def pack(self):
        return pack(self)
% end